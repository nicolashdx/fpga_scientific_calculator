library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.FloatPoint_package.all;

entity add_tb is
end add_tb;

architecture behavior of add_tb is
    signal a_tb : float := ('0', (others => '0'), (others => '0'));
    signal b_tb : float := ('0', (others => '0'), (others => '0'));
    signal c_tb : float;

begin
    process
    begin
        -- Test Case 1: a = -2.5 = (-10.1)2, b = 3.0 = (11.0)2
        a_tb <= ('1', std_logic_vector(to_unsigned(Bias + 1, E)), ('0', '1', others => '0'));
        b_tb <= ('0', std_logic_vector(to_unsigned(Bias + 1, E)), ('1', '0', others => '0'));
		  c_tb <= float_add(a_tb, b_tb); -- c = 0.5 = (0.1)2
		  wait for 20 ns;
		  -- Test Case 1: a = -1 = (-1)2, b = 1.0 = (1.0)2
        a_tb <= ('1', std_logic_vector(to_unsigned(Bias + 1, E)), (others => '0'));
        b_tb <= ('0', std_logic_vector(to_unsigned(Bias + 1, E)), (others => '0'));
		  c_tb <= float_add(a_tb, b_tb); -- c = 0.5 = (0.1)2
		  wait for 20 ns;
		  wait;
		  wait;
    end process;

end behavior;
