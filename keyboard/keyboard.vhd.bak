library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

library work;
use work.FloatPoint_package.all;
use work.FP_convert_pkg.all;

entity keyboard is
    Port (
        clk, reset : in std_logic;
        row : in std_logic_vector(3 downto 0);
        column : out std_logic_vector(2 downto 0);
		key_pressed : out std_logic_vector(3 downto 0);
        pressing : out std_logic;
    );
end keyboard;

architecture Behavioral of keyboard is
    TYPE detector_state IS (col1 col2, col3);
	signal state, next_state: detector_state;

    signal column_int : std_logic_vector(2 downto 0) := "111";
    signal rows_int : std_logic_vector(3 downto 0);
	signal clock_count : integer := 0;
    
begin
	 process(reset, clk)
    begin
        if rising_edge(clk) then
            state <= next_state
        elsif reset='1' then
            state <= col1;
        end if;
    end process;

    process(state)
    begin
        case state is
            when col1 =>
                col <= "110";
                pressing <= '0';
                if row = "110" then
                    key_pressed <= "0001" -- 1
                    pressing <= '1';
                elsif row = "101" then
                    key_pressed <= "0100" -- 4
                    pressing <= '1';
                elsif row = "011" then
                    key_pressed <= "0111" -- 7
                    pressing <= '1';
                else
                    key_pressed <= "0000";
                end if;
                next_state <= col2;
            when col2 =>
                col <= "101";
                pressing <= '0';
                if row = "110" then
                    key_pressed <= "0010" -- 2
                    pressing <= '1';
                elsif row = "101" then
                    key_pressed <= "0101" -- 5
                    pressing <= '1';
                elsif row = "011" then
                    key_pressed <= "1000" -- 8
                    pressing <= '1';
                else
                    key_pressed <= "0000";
                end if;
                next_state <= col3;
            when col3 =>
                col <= "110";
                pressing <= '0';
                if row = "110" then
                    key_pressed <= "0011" -- 3
                    pressing <= '1';
                elsif row = "101" then
                    key_pressed <= "0110" -- 6
                    pressing <= '1';
                elsif row = "011" then
                    key_pressed <= "1001" -- 9
                    pressing <= '1';
                else
                    key_pressed <= "0000";
                end if;
                next_state <= col1;
            when others
                    next_state <= col1;
            end case;
    end process;
end Behavioral;
